- What are indexes? And why whould you use them?
- Different types of indesex.
- Indexes in action.

Indexes can enhance query performance.

INDEXES works for queries with WHERE
INDEXES:
    - Values are stored in a sorted extra table. A connection to the original row is stored along with the index value.
    By default you just have INDEX for PRIMARY KEY

THE PROBLEM WITH TOO MANY INDEXES:

    Indexes can speed up queries (with WHERE)
        - BUT -
        - Whenever index values change, the values have to be updated in both the original table and INDEX table
            - Many INDEXES:
                Many tables are updated whenever data is manipulated
            - Frequent value changes:
                Multiple tables are updated frequently
        - AS RESULT -
            - SLOW QUERIES & BAD PERFORMANCE            

DIFFERENT TYPES OF INDEXES

    - Technical part(implementation):

        B-TREE
        HASH
        GoST
        ...

        - Use diffrrent algoritms & support different comparison operations ...

    - Kind Of Indexes / Functionality:

        - Standard single-column index
        - Unique index
        - Multi-column index
        - Partial index(Not in MySQL)

            - Used for different purposes & data values


!!! EXPLAIN !!!
    EXPLAIN SELECT... results in: something like that:
    
        [
            {"QUERY PLAN": 
                "Seq Scan on users  (cost=0.00..10.62 rows=17 width=1556)"}, 
            {"QUERY PLAN": 
                "Filter: (salary > 12000)"}
        ]

    EXPLAIN ANALYZE SELECT... on other hand results in: something like that:

        [
            {
                "QUERY PLAN": "Seq Scan on users  (cost=0.00..10.62 rows=17 width=1556) (actual time=0.010..0.010 rows=3 loops=1)"
            },
            {
                "QUERY PLAN": "  Filter: (salary > 12000)"
            },
            {
                "QUERY PLAN": "  Rows Removed by Filter: 3"
            },
            {
                "QUERY PLAN": "Planning Time: 0.417 ms"
            },
            {
                "QUERY PLAN": "Execution Time: 0.041 ms"
            }
        ]

        THAT EXAMPLES ARE FOR POSTGRES

        UNIQUE underhood create UNIQUE INDEX